//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseEntities
{
    using System;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Drawing;
    using System.IO;
    using System.Runtime.Serialization.Formatters.Binary;
    [Serializable]
    public partial class Carrier : IRateable, IEquatable<Carrier>
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Carrier()
        {
            this.RateSet = new HashSet<Rate>();
            Name = "empty";
            Photo = new Bitmap(ConfigurationManager.AppSettings.Get("defaultPhotoPath"));
        }

        public Carrier(string name, int regNumber, int traffic, int amountOfShips, Bitmap photo) : base()
        {
            Name = name;
            RegistrationNumber = regNumber;
            Traffic = traffic;
            AmountOfShips = amountOfShips;
            Photo = photo;
        }
    
        public int Id { get; set; }
        public int RegistrationNumber { get; set; }
        public double TotalRate { get; set; }
        public Bitmap Photo { get; set; }
        public byte[] BinaryPhoto
        {
            get
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    BinaryFormatter binaryFormatter = new BinaryFormatter();
                    binaryFormatter.Serialize(ms, Photo);
                    return ms.ToArray();
                }
            }
            set
            {
                using (MemoryStream ms = new MemoryStream(value))
                {
                    BinaryFormatter binaryFormatter = new BinaryFormatter();
                    Photo = binaryFormatter.Deserialize(ms) as Bitmap;
                }
            }
        }
        public string Name { get; set; }
        //Количество контейнеров, которое перевозчик может перевезти за год
        public int Traffic { get; set; }       
        public int AmountOfShips { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Rate> RateSet { get; set; }

        public bool Equals(Carrier other)
        {
            return RegistrationNumber.Equals(other.RegistrationNumber) && TotalRate.Equals(other.TotalRate)
                && Photo.Equals(other.Photo) && Name.Equals(other.Name) && Traffic.Equals(other.Traffic)
                && AmountOfShips.Equals(other.AmountOfShips);
        }
    }
}
